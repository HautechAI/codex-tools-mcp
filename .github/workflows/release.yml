name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (for dry-run testing)'
        required: false

permissions:
  contents: write

env:
  BINARY_NAME: codex-tools-mcp

jobs:
  build:
    name: Build (${{ matrix.target }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # NOTE: Using GNU targets for Linux initially to avoid common MUSL cross-link issues.
          # If MUSL toolchain is added later, switch to -unknown-linux-musl.
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag }}" ]]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=${TAG#v}" >> "$GITHUB_OUTPUT"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install Linux deps (GNU)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Build
        shell: bash
        run: |
          cargo build --release --locked --target ${{ matrix.target }}

      - name: Prepare package (unix)
        id: package_unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -euo pipefail
          NAME="$BINARY_NAME-v${{ steps.version.outputs.version }}-${{ matrix.target }}"
          DIST="dist"
          mkdir -p "$DIST"
          BIN_PATH="target/${{ matrix.target }}/release/${BINARY_NAME}"
          STAGE_DIR="$DIST/$NAME"
          mkdir -p "$STAGE_DIR"
          cp "$BIN_PATH" "$STAGE_DIR/"
          # Include README and LICENSE if present
          [[ -f README.md ]] && cp README.md "$STAGE_DIR/"
          [[ -f LICENSE ]] && cp LICENSE "$STAGE_DIR/"
          (cd "$DIST" && tar -czf "$NAME.tar.gz" "$NAME")
          echo "archive=$DIST/$NAME.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Prepare package (windows)
        id: package_win
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $name = "$env:BINARY_NAME-v${{ steps.version.outputs.version }}-${{ matrix.target }}"
          $dist = "dist"
          New-Item -ItemType Directory -Force -Path $dist | Out-Null
          $stage = Join-Path $dist $name
          New-Item -ItemType Directory -Force -Path $stage | Out-Null
          $bin = "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe"
          Copy-Item $bin $stage
          if (Test-Path README.md) { Copy-Item README.md $stage }
          if (Test-Path LICENSE) { Copy-Item LICENSE $stage }
          $zipPath = Join-Path $dist "$name.zip"
          Compress-Archive -Path $stage -DestinationPath $zipPath -Force
          "archive=$zipPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            ${{ steps.package_unix.outputs.archive }}
            ${{ steps.package_win.outputs.archive }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag }}" ]]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=${TAG#v}" >> "$GITHUB_OUTPUT"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate checksums
        id: checksums
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          FILE="${BINARY_NAME}-v${{ steps.version.outputs.version }}-checksums.txt"
          : > "$FILE"
          shopt -s nullglob
          for f in *.{tar.gz,zip}; do
            if command -v shasum >/dev/null 2>&1; then
              sum=$(shasum -a 256 "$f" | awk '{print $1}')
            else
              sum=$(sha256sum "$f" | awk '{print $1}')
            fi
            echo "$sum  $f" >> "$FILE"
          done
          echo "checksums=dist/$FILE" >> "$GITHUB_OUTPUT"

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          draft: ${{ github.event_name == 'workflow_dispatch' }}
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/${{ env.BINARY_NAME }}-v${{ steps.version.outputs.version }}-checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
