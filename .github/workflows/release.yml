name: Release
on:
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  BINARY_NAME: codex-tools-mcp
jobs:
  build:
    name: Build ${{ matrix.os_name }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    env:
      TAG: ${{ github.event.release.tag_name || github.ref_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os_name: linux
            arch: amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            os_name: linux
            arch: arm64
            use_cross: true
          - os: macos-13
            target: x86_64-apple-darwin
            os_name: darwin
            arch: amd64
          - os: macos-14
            target: aarch64-apple-darwin
            os_name: darwin
            arch: arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            os_name: windows
            arch: amd64
    steps:
      - name: Ensure ref is a tag when not a release
        if: ${{ github.event_name != 'release' && github.ref_type != 'tag' }}
        run: |
          echo "This workflow must be dispatched with ref set to a tag (refs/tags/*)." >&2
          exit 1
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Compute version
        id: version
        shell: bash
        run: |
          TAG="${{ env.TAG }}"
          if [[ "$TAG" == v* ]]; then VERSION="${TAG:1}"; else VERSION="$TAG"; fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
      - name: Install cross (for linux/arm64)
        if: ${{ matrix.use_cross }}
        run: cargo install cross --version 0.2.5 --locked
      - name: Build (release)
        shell: bash
        env:
          USE_CROSS: ${{ matrix.use_cross }}
        run: |
          set -euo pipefail
          if [[ "$USE_CROSS" == "true" ]]; then
            cross build --locked --release --target ${{ matrix.target }}
          else
            cargo build --locked --release --target ${{ matrix.target }}
          fi
      - name: Package artifact (non-Windows)
        if: ${{ matrix.os_name != 'windows' }}
        shell: bash
        run: |
          set -euo pipefail
          NAME="${BINARY_NAME}"
          OS="${{ matrix.os_name }}"
          ARCH="${{ matrix.arch }}"
          BIN="target/${{ matrix.target }}/release/${NAME}"
          STAGE="dist/${NAME}_${VERSION}_${OS}_${ARCH}"
          ARCHIVE="${STAGE}.tar.gz"
          mkdir -p "$STAGE"
          cp "$BIN" "$STAGE/"
          chmod +x "$STAGE/${NAME}"
          [ -f README.md ] && cp README.md "$STAGE/" || true
          [ -f LICENSE ] && cp LICENSE "$STAGE/" || true
          tar -czf "$ARCHIVE" -C "$STAGE" .
      - name: Package artifact (Windows)
        if: ${{ matrix.os_name == 'windows' }}
        shell: pwsh
        run: |
          $Name = "$env:BINARY_NAME"
          $OS = "${{ matrix.os_name }}"
          $Arch = "${{ matrix.arch }}"
          $Bin = "target/${{ matrix.target }}/release/$Name.exe"
          $Stage = "dist/${Name}_${env:VERSION}_${OS}_${Arch}"
          New-Item -ItemType Directory -Force -Path $Stage | Out-Null
          Copy-Item $Bin "$Stage/"
          if (Test-Path README.md) { Copy-Item README.md "$Stage/" }
          if (Test-Path LICENSE) { Copy-Item LICENSE "$Stage/" }
          Compress-Archive -Path "$Stage/*" -DestinationPath "$Stage.zip"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os_name }}-${{ matrix.arch }}
          path: |
            dist/*.tar.gz
            dist/*.zip
          if-no-files-found: error
          retention-days: 7
  publish:
    name: Attach assets to Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Generate SHA256 checksums
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( dist/*.tar.gz dist/*.zip )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No packaged artifacts found" >&2
            exit 1
          fi
          sha256sum "${files[@]}" > dist/SHA256SUMS.txt
          cat dist/SHA256SUMS.txt
      - name: Upload assets to existing release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name || github.ref_name }}
          generate_release_notes: false
          files: |
            dist/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
